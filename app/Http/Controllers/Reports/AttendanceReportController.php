<?php

namespace App\Http\Controllers\Reports;

use Illuminate\Support\Facades\DB;
use App\Helpers\Helpers;
use App\Http\Controllers\Controller;

use Illuminate\Http\Response;
use Illuminate\Http\Request;

use Symfony\Component\HttpFoundation\Response as ResponseAlias;

/**
 * Class AttendanceReportController
 * @package App\Http\Controllers\Reports
 *
 * Controller for handling attendance reports.
 */
class AttendanceReportController extends Controller
{
    private $CONTROLLER_NAME = "Attendance Reports";

    public function reportByPeriod(Request $request)
    {
        try {
            $area_id = $request->area_id;
            $sector = $request->sector;
            $area_under = strtolower($request->area_under);
            $month_of = (int)$request->month_of;
            $year_of = (int)$request->year_of;
            $employment_type = $request->employment_type_id;
            $designation_id = $request->designation_id;
            $absent_leave_without_pay = $request->absent_leave_without_pay;
            $absent_without_official_leave = $request->absent_without_official_leave;
            $first_half = (bool)$request->first_half;
            $second_half = (bool)$request->second_half;
            $limit = $request->limit;
            $sort_order = $request->sort_order;
            $report_type = $request->report_type;

            if ($sector && !$area_id) {
                return response()->json(['message' => 'Area ID is required when Sector is provided'], 400);
            }

            $employees = collect();

            if (!$sector && !$area_id) {
                switch ($report_type) {
                    case 'absences':
                        $employees = DB::table('assigned_areas as a')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereMonth('dtr.dtr_date', '=', $month_of)
                                    ->whereYear('dtr.dtr_date', '=', $year_of);
                                if ($first_half) {
                                    $join->whereDay('dtr.dtr_date', '<=', 15);
                                }
                                if ($second_half) {
                                    $join->whereDay('dtr.dtr_date', '>', 15);
                                }
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                            ->whereNull('ep.deactivated_at')
                            ->where('ep.personal_information_id', '<>', 1)
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
                                            pi.first_name, ' ',
                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                            pi.last_name,
                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                        ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
                                WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
                                MONTH(dtr.dtr_date) = $month_of 
                                AND YEAR(dtr.dtr_date) = $year_of 
                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                MONTH(dtr.dtr_date) = $month_of 
                                AND YEAR(dtr.dtr_date) = $year_of 
                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                MONTH(dtr.dtr_date) = $month_of 
                                AND YEAR(dtr.dtr_date) = $year_of 
                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
                                WHEN MONTH(sch.date) = ' . $month_of . ' 
                                AND YEAR(sch.date) = ' . $year_of . ' 
                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                THEN sch.date END) as scheduled_days'),

                                // Days Absent
                                DB::raw("GREATEST(
                                COUNT(DISTINCT CASE
                                    WHEN MONTH(sch.date) = $month_of 
                                    AND YEAR(sch.date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                    AND la.id IS NULL
                                    AND cto.id IS NULL
                                    AND oba.id IS NULL
                                    AND ota.id IS NULL
                                    THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),
                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            // Apply conditions based on variables
                            ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                            WHEN MONTH(sch.date) = $month_of
                                                                            AND YEAR(sch.date) = $year_of
                                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                            AND la.id IS NOT NULL  -- No approved leave application
                                                                            THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                            WHEN MONTH(sch.date) = $month_of
                                                                            AND YEAR(sch.date) = $year_of
                                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                            AND la.id IS NOT NULL  -- No approved leave application
                                                                            AND cto.id IS NOT NULL -- No CTO application
                                                                            AND oba.id IS NOT NULL -- No Official Business application
                                                                            AND ota.id IS NOT NULL -- No Official Time application
                                                                            THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('days_absent > 0')
                            ->when($sort_order, function ($query, $sort_order) {
                                if ($sort_order === 'asc') {
                                    return $query->orderByRaw('days_absent ASC');
                                } elseif ($sort_order === 'desc') {
                                    return $query->orderByRaw('days_absent DESC');
                                } else {
                                    return response()->json(['message' => 'Invalid sort order'], 400);
                                }
                            })
                            ->orderBy('employee_area_name')->orderBy('ep.id')
                            ->when($limit, function ($query, $limit) {
                                return $query->limit($limit);
                            })
                            ->get();
                        break;
                    case 'tardiness':
                        $employees = DB::table('assigned_areas as a')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereMonth('dtr.dtr_date', '=', $month_of)
                                    ->whereYear('dtr.dtr_date', '=', $year_of);
                                if ($first_half) {
                                    $join->whereDay('dtr.dtr_date', '<=', 15);
                                }
                                if ($second_half) {
                                    $join->whereDay('dtr.dtr_date', '>', 15);
                                }
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                            ->whereNull('ep.deactivated_at')
                            ->where('ep.personal_information_id', '<>', 1)
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
                                            pi.first_name, ' ',
                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                            pi.last_name,
                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                        ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'), // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                    AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                    ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                    THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN MONTH(sch.date) = ' . $month_of . ' 
                                    AND YEAR(sch.date) = ' . $year_of . ' 
                                    ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                    THEN sch.date END) as scheduled_days'),

                                // Days with Tardiness
                                DB::raw("COUNT(DISTINCT CASE
                                                    WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                    AND (dtr.first_in > ts.first_in 
                                                        OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                    THEN dtr.dtr_date
                                                END) as days_with_tardiness"),

                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            // Apply conditions based on variables
                            ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('days_with_tardiness > 0')
                            ->when($sort_order, function ($query, $sort_order) {
                                if ($sort_order === 'asc') {
                                    return $query->orderByRaw('days_with_tardiness ASC');
                                } elseif ($sort_order === 'desc') {
                                    return $query->orderByRaw('days_with_tardiness DESC');
                                } else {
                                    return response()->json(['message' => 'Invalid sort order'], 400);
                                }
                            })
                            ->orderBy('employee_area_name')->orderBy('ep.id')
                            ->when($limit, function ($query, $limit) {
                                return $query->limit($limit);
                            })
                            ->get();
                        break;
                    case 'undertime':
                        $employees = DB::table('assigned_areas as a')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereMonth('dtr.dtr_date', '=', $month_of)
                                    ->whereYear('dtr.dtr_date', '=', $year_of);
                                if ($first_half) {
                                    $join->whereDay('dtr.dtr_date', '<=', 15);
                                }
                                if ($second_half) {
                                    $join->whereDay('dtr.dtr_date', '>', 15);
                                }
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                            ->whereNull('ep.deactivated_at')
                            ->where('ep.personal_information_id', '<>', 1)
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                    AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                    ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                    THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN MONTH(sch.date) = ' . $month_of . ' 
                                    AND YEAR(sch.date) = ' . $year_of . ' 
                                    ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                    THEN sch.date END) as scheduled_days'),

                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                            WHEN MONTH(sch.date) = $month_of
                                                                            AND YEAR(sch.date) = $year_of
                                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                            AND la.id IS NOT NULL  -- No approved leave application
                                                                            THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                            WHEN MONTH(sch.date) = $month_of
                                                                            AND YEAR(sch.date) = $year_of
                                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                            AND la.id IS NOT NULL  -- No approved leave application
                                                                            AND cto.id IS NOT NULL -- No CTO application
                                                                            AND oba.id IS NOT NULL -- No Official Business application
                                                                            AND ota.id IS NOT NULL -- No Official Time application
                                                                            THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employee_name', 'employment_type_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('total_undertime_minutes > 0')
                            ->when($sort_order, function ($query, $sort_order) {
                                if ($sort_order === 'asc') {
                                    return $query->orderByRaw('total_undertime_minutes ASC');
                                } elseif ($sort_order === 'desc') {
                                    return $query->orderByRaw('total_undertime_minutes DESC');
                                } else {
                                    return response()->json(['message' => 'Invalid sort order'], 400);
                                }
                            })
                            ->orderBy('employee_area_name')->orderBy('ep.id')
                            ->when($limit, function ($query, $limit) {
                                return $query->limit($limit);
                            })
                            ->get();
                        break;
                    case 'perfect':
                        $employees = DB::table('assigned_areas as a')
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereMonth('dtr.dtr_date', '=', $month_of)
                                    ->whereYear('dtr.dtr_date', '=', $year_of);
                                if ($first_half) {
                                    $join->whereDay('dtr.dtr_date', '<=', 15);
                                }
                                if ($second_half) {
                                    $join->whereDay('dtr.dtr_date', '>', 15);
                                }
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                            ->whereNull('ep.deactivated_at')
                            ->where('ep.personal_information_id', '<>', 1)
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
                                                pi.first_name, ' ',
                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                pi.last_name,
                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                            ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                    AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                    ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                    THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    MONTH(dtr.dtr_date) = $month_of 
                                    AND YEAR(dtr.dtr_date) = $year_of 
                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN MONTH(sch.date) = ' . $month_of . ' 
                                    AND YEAR(sch.date) = ' . $year_of . ' 
                                    ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                    THEN sch.date END) as scheduled_days'),

                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                            WHEN MONTH(sch.date) = $month_of
                                                                            AND YEAR(sch.date) = $year_of
                                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                            AND la.id IS NOT NULL  -- No approved leave application
                                                                            THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                            WHEN MONTH(sch.date) = $month_of
                                                                            AND YEAR(sch.date) = $year_of
                                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                            AND la.id IS NOT NULL  -- No approved leave application
                                                                            AND cto.id IS NOT NULL -- No CTO application
                                                                            AND oba.id IS NOT NULL -- No Official Business application
                                                                            AND ota.id IS NOT NULL -- No Official Time application
                                                                            THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id',  'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('
                                                SUM(CASE WHEN dtr.first_in > ts.first_in OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in) THEN 1 ELSE 0 END) = 0 AND
                                                SUM(CASE WHEN dtr.undertime_minutes > 0 THEN 1 ELSE 0 END) = 0 AND
                                                COUNT(DISTINCT sch.date) = COUNT(DISTINCT dtr.dtr_date)
                                            ')
                            ->orderBy('employee_area_name')
                            ->orderBy('ep.id')
                            ->get();
                        break;
                }
            } else {
                switch ($sector) {
                    case 'division':
                        switch ($report_type) {
                            case 'absences':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN MONTH(sch.date) = $month_of 
                                                            AND YEAR(sch.date) = $year_of 
                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN MONTH(sch.date) = $month_of 
                                                            AND YEAR(sch.date) = $year_of 
                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'tardiness':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                                AND YEAR(dtr.dtr_date) = $year_of
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                                AND YEAR(dtr.dtr_date) = $year_of
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'undertime':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'perfect':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                    pi.first_name, ' ',
                                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                    pi.last_name,
                                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('
                                                                    SUM(CASE WHEN dtr.first_in > ts.first_in OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in) THEN 1 ELSE 0 END) = 0 AND
                                                                    SUM(CASE WHEN dtr.undertime_minutes > 0 THEN 1 ELSE 0 END) = 0 AND
                                                                    COUNT(DISTINCT sch.date) = COUNT(DISTINCT dtr.dtr_date)
                                                                ')
                                                ->orderBy('employee_area_name')
                                                ->orderBy('ep.id')
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                    pi.first_name, ' ',
                                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                    pi.last_name,
                                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('
                                                                    SUM(CASE WHEN dtr.first_in > ts.first_in OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in) THEN 1 ELSE 0 END) = 0 AND
                                                                    SUM(CASE WHEN dtr.undertime_minutes > 0 THEN 1 ELSE 0 END) = 0 AND
                                                                    COUNT(DISTINCT sch.date) = COUNT(DISTINCT dtr.dtr_date)
                                                                ')
                                                ->orderBy('employee_area_name')
                                                ->orderBy('ep.id')
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                        }
                        break;
                    case 'department':
                        switch ($report_type) {
                            case 'absences':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN MONTH(sch.date) = $month_of 
                                                            AND YEAR(sch.date) = $year_of 
                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                            COUNT(DISTINCT CASE
                                                                WHEN MONTH(sch.date) = $month_of 
                                                                AND YEAR(sch.date) = $year_of 
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                                                AND la.id IS NULL
                                                                AND cto.id IS NULL
                                                                AND oba.id IS NULL
                                                                AND ota.id IS NULL
                                                                THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'tardiness':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                                AND YEAR(dtr.dtr_date) = $year_of
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                                AND YEAR(dtr.dtr_date) = $year_of
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'undertime':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'perfect':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                    pi.first_name, ' ',
                                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                    pi.last_name,
                                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('
                                                                    SUM(CASE WHEN dtr.first_in > ts.first_in OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in) THEN 1 ELSE 0 END) = 0 AND
                                                                    SUM(CASE WHEN dtr.undertime_minutes > 0 THEN 1 ELSE 0 END) = 0 AND
                                                                    COUNT(DISTINCT sch.date) = COUNT(DISTINCT dtr.dtr_date)
                                                                ')
                                                ->orderBy('employee_area_name')
                                                ->orderBy('ep.id')
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                    pi.first_name, ' ',
                                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                    pi.last_name,
                                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('
                                                                    SUM(CASE WHEN dtr.first_in > ts.first_in OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in) THEN 1 ELSE 0 END) = 0 AND
                                                                    SUM(CASE WHEN dtr.undertime_minutes > 0 THEN 1 ELSE 0 END) = 0 AND
                                                                    COUNT(DISTINCT sch.date) = COUNT(DISTINCT dtr.dtr_date)
                                                                ')
                                                ->orderBy('employee_area_name')
                                                ->orderBy('ep.id')
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                        }
                        break;
                    case 'section':
                        switch ($report_type) {
                            case 'absences':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN MONTH(sch.date) = $month_of 
                                                            AND YEAR(sch.date) = $year_of 
                                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                            COUNT(DISTINCT CASE
                                                                WHEN MONTH(sch.date) = $month_of 
                                                                AND YEAR(sch.date) = $year_of 
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                                                AND la.id IS NULL
                                                                AND cto.id IS NULL
                                                                AND oba.id IS NULL
                                                                AND ota.id IS NULL
                                                                THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'tardiness':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                                AND YEAR(dtr.dtr_date) = $year_of
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                                AND YEAR(dtr.dtr_date) = $year_of
                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_area_name', 'employee_designation_name', 'employee_designation_code', '')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'undertime':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_area_name', 'employee_designation_name', 'employee_designation_code', '')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'perfect':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                                    pi.first_name, ' ',
                                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                    pi.last_name,
                                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                        AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        MONTH(dtr.dtr_date) = $month_of 
                                                        AND YEAR(dtr.dtr_date) = $year_of 
                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                        AND YEAR(sch.date) = ' . $year_of . ' 
                                                        ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                        THEN sch.date END) as scheduled_days'),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('
                                                                    SUM(CASE WHEN dtr.first_in > ts.first_in OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in) THEN 1 ELSE 0 END) = 0 AND
                                                                    SUM(CASE WHEN dtr.undertime_minutes > 0 THEN 1 ELSE 0 END) = 0 AND
                                                                    COUNT(DISTINCT sch.date) = COUNT(DISTINCT dtr.dtr_date)
                                                                ')
                                                ->orderBy('employee_area_name')
                                                ->orderBy('ep.id')
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                        ->whereYear('dtr.dtr_date', '=', $year_of);
                                                    if ($first_half) {
                                                        $join->whereDay('dtr.dtr_date', '<=', 15);
                                                    }
                                                    if ($second_half) {
                                                        $join->whereDay('dtr.dtr_date', '>', 15);
                                                    }
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),
                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                            WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                            AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                            ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                            THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                            MONTH(dtr.dtr_date) = $month_of 
                                            AND YEAR(dtr.dtr_date) = $year_of 
                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                            dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                            MONTH(dtr.dtr_date) = $month_of 
                                            AND YEAR(dtr.dtr_date) = $year_of 
                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                            dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                            MONTH(dtr.dtr_date) = $month_of 
                                            AND YEAR(dtr.dtr_date) = $year_of 
                                            " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                            dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                            WHEN MONTH(sch.date) = ' . $month_of . ' 
                                            AND YEAR(sch.date) = ' . $year_of . ' 
                                            ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                            THEN sch.date END) as scheduled_days'),
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                                WHEN MONTH(sch.date) = $month_of
                                                                                                AND YEAR(sch.date) = $year_of
                                                                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                                AND la.id IS NOT NULL  -- No approved leave application
                                                                                                AND cto.id IS NOT NULL -- No CTO application
                                                                                                AND oba.id IS NOT NULL -- No Official Business application
                                                                                                AND ota.id IS NOT NULL -- No Official Time application
                                                                                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                        }
                        break;
                    case 'unit':
                        switch ($report_type) {
                            case 'absences':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                ->whereYear('dtr.dtr_date', '=', $year_of);

                                            if ($first_half) {
                                                $join->whereDay('dtr.dtr_date', '<=', 15);
                                            }
                                            if ($second_half) {
                                                $join->whereDay('dtr.dtr_date', '>', 15);
                                            }
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                                                pi.first_name, ' ',
                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                pi.last_name,
                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                            ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                AND YEAR(sch.date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                THEN sch.date END) as scheduled_days'),

                                            // Days Absent
                                            DB::raw("GREATEST(
                                                COUNT(DISTINCT CASE
                                                    WHEN MONTH(sch.date) = $month_of 
                                                    AND YEAR(sch.date) = $year_of 
                                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . " 
                                                    AND la.id IS NULL
                                                    AND cto.id IS NULL
                                                    AND oba.id IS NULL
                                                    AND ota.id IS NULL
                                                    THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")

                                        )
                                        // Apply conditions based on variables
                                        ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('days_absent > 0')
                                        ->when($absent_leave_without_pay, function ($query) {
                                            return $query->havingRaw('absent_leave_without_pay > 0');
                                        })
                                        ->when($absent_without_official_leave, function ($query) {
                                            return $query->havingRaw('absent_without_official_leave > 0');
                                        })
                                        ->when($sort_order, function ($query, $sort_order) {
                                            if ($sort_order === 'asc') {
                                                return $query->orderByRaw('days_absent ASC');
                                            } elseif ($sort_order === 'desc') {
                                                return $query->orderByRaw('days_absent DESC');
                                            } else {
                                                return response()->json(['message' => 'Invalid sort order'], 400);
                                            }
                                        })
                                        ->orderBy('employee_area_name')->orderBy('ep.id')
                                        ->when($limit, function ($query, $limit) {
                                            return $query->limit($limit);
                                        })
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            case 'tardiness':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                ->whereYear('dtr.dtr_date', '=', $year_of);
                                            if ($first_half) {
                                                $join->whereDay('dtr.dtr_date', '<=', 15);
                                            }
                                            if ($second_half) {
                                                $join->whereDay('dtr.dtr_date', '>', 15);
                                            }
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                AND YEAR(sch.date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                THEN sch.date END) as scheduled_days'),

                                            // Days with Tardiness
                                            DB::raw("COUNT(DISTINCT CASE
                                                                WHEN (MONTH(dtr.dtr_date) = $month_of 
                                                                    AND YEAR(dtr.dtr_date) = $year_of
                                                                    " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ")
                                                                AND (dtr.first_in > ts.first_in 
                                                                    OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                                THEN dtr.dtr_date
                                                            END) as days_with_tardiness"),

                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                        )
                                        // Apply conditions based on variables
                                        ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('days_with_tardiness > 0')
                                        ->when($sort_order, function ($query, $sort_order) {
                                            if ($sort_order === 'asc') {
                                                return $query->orderByRaw('days_with_tardiness ASC');
                                            } elseif ($sort_order === 'desc') {
                                                return $query->orderByRaw('days_with_tardiness DESC');
                                            } else {
                                                return response()->json(['message' => 'Invalid sort order'], 400);
                                            }
                                        })
                                        ->orderBy('employee_area_name')->orderBy('ep.id')
                                        ->when($limit, function ($query, $limit) {
                                            return $query->limit($limit);
                                        })
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            case 'undertime':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                ->whereYear('dtr.dtr_date', '=', $year_of);
                                            if ($first_half) {
                                                $join->whereDay('dtr.dtr_date', '<=', 15);
                                            }
                                            if ($second_half) {
                                                $join->whereDay('dtr.dtr_date', '>', 15);
                                            }
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                                                                pi.first_name, ' ',
                                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                                pi.last_name,
                                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                            ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                AND YEAR(sch.date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                THEN sch.date END) as scheduled_days'),

                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                        )
                                        ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('total_undertime_minutes > 0')
                                        ->when($sort_order, function ($query, $sort_order) {
                                            if ($sort_order === 'asc') {
                                                return $query->orderByRaw('total_undertime_minutes ASC');
                                            } elseif ($sort_order === 'desc') {
                                                return $query->orderByRaw('total_undertime_minutes DESC');
                                            } else {
                                                return response()->json(['message' => 'Invalid sort order'], 400);
                                            }
                                        })
                                        ->orderBy('employee_area_name')->orderBy('ep.id')
                                        ->when($limit, function ($query, $limit) {
                                            return $query->limit($limit);
                                        })
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            case 'perfect':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($month_of, $year_of, $first_half, $second_half) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereMonth('dtr.dtr_date', '=', $month_of)
                                                ->whereYear('dtr.dtr_date', '=', $year_of);
                                            if ($first_half) {
                                                $join->whereDay('dtr.dtr_date', '<=', 15);
                                            }
                                            if ($second_half) {
                                                $join->whereDay('dtr.dtr_date', '>', 15);
                                            }
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                                                            pi.first_name, ' ',
                                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                            pi.last_name,
                                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                        ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(dtr.dtr_date) = ' . $month_of . ' 
                                                AND YEAR(dtr.dtr_date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ' 
                                                THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                MONTH(dtr.dtr_date) = $month_of 
                                                AND YEAR(dtr.dtr_date) = $year_of 
                                                " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(dtr.dtr_date) <= 15' : 'AND DAY(dtr.dtr_date) > 15')) . ",
                                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN MONTH(sch.date) = ' . $month_of . ' 
                                                AND YEAR(sch.date) = ' . $year_of . ' 
                                                ' . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . ' 
                                                THEN sch.date END) as scheduled_days'),

                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                        )
                                        ->when($absent_leave_without_pay, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($month_of, $year_of, $first_half, $second_half) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                                                        WHEN MONTH(sch.date) = $month_of
                                                                                        AND YEAR(sch.date) = $year_of
                                                                                        " . (!$first_half && !$second_half ? '' : ($first_half ? 'AND DAY(sch.date) <= 15' : 'AND DAY(sch.date) > 15')) . "
                                                                                        AND la.id IS NOT NULL  -- No approved leave application
                                                                                        AND cto.id IS NOT NULL -- No CTO application
                                                                                        AND oba.id IS NOT NULL -- No Official Business application
                                                                                        AND ota.id IS NOT NULL -- No Official Time application
                                                                                        THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('
                                                            SUM(CASE WHEN dtr.first_in > ts.first_in OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in) THEN 1 ELSE 0 END) = 0 AND
                                                            SUM(CASE WHEN dtr.undertime_minutes > 0 THEN 1 ELSE 0 END) = 0 AND
                                                            COUNT(DISTINCT sch.date) = COUNT(DISTINCT dtr.dtr_date)
                                                        ')
                                        ->orderBy('employee_area_name')
                                        ->orderBy('ep.id')
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            default:
                                return response()->json(['message' => 'Invalid report type.'], 400);
                        }
                        break;
                    default:
                        return response()->json(['message' => 'Unknown sector.'], 400);
                }
            }

            return response()->json([
                'count' => COUNT($employees),
                'message' => 'Successfully retrieved data.',
                'data' => $employees

            ]);
        } catch (\Throwable $th) {
            // Log the error and return an internal server error response
            Helpers::errorLog($this->CONTROLLER_NAME, 'filterAttendanceReport', $th->getMessage());
            return response()->json(
                [
                    'message' => $th->getMessage()
                ],
                Response::HTTP_INTERNAL_SERVER_ERROR
            );
        }
    }

    public function reportByDateRange(Request $request)
    {
        try {
            $area_id = $request->area_id;
            $sector = $request->sector;
            $area_under = strtolower($request->area_under);
            $start_date = $request->start_date;
            $end_date = $request->end_date;
            $employment_type = $request->employment_type_id;
            $designation_id = $request->designation_id;
            $absent_leave_without_pay = $request->absent_leave_without_pay;
            $absent_without_official_leave = $request->absent_without_official_leave;
            $limit = $request->limit;
            $sort_order = $request->sort_order;
            $report_type = $request->report_type;

            if ($sector && !$area_id) {
                return response()->json(['message' => 'Area ID is required when Sector is provided'], 400);
            }

            $employees = collect();

            // TODO test filtering if area id and sector is empty
            if (!$sector && !$area_id) {
                switch ($report_type) {
                    case 'absences':
                        $employees = DB::table('assigned_areas as a')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
                                    pi.first_name, ' ',
                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                    pi.last_name,
                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                    THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                    THEN sch.date END) as scheduled_days'),

                                // Days Absent
                                DB::raw("GREATEST(
                                    COUNT(DISTINCT CASE
                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                        AND la.id IS NULL
                                        AND cto.id IS NULL
                                        AND oba.id IS NULL
                                        AND ota.id IS NULL
                                        THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            // Apply conditions based on variables
                            ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                    AND la.id IS NULL  -- No approved leave application
                                    THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                    AND la.id IS NULL  -- No approved leave application
                                    AND cto.id IS NULL -- No CTO application
                                    AND oba.id IS NULL -- No Official Business application
                                    AND ota.id IS NULL -- No Official Time application
                                    THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('days_absent > 0')
                            ->when($sort_order, function ($query, $sort_order) {
                                if ($sort_order === 'asc') {
                                    return $query->orderByRaw('days_absent ASC');
                                } elseif ($sort_order === 'desc') {
                                    return $query->orderByRaw('days_absent DESC');
                                } else {
                                    return response()->json(['message' => 'Invalid sort order'], 400);
                                }
                            })
                            ->orderBy('employee_area_name')->orderBy('ep.id')
                            ->when($limit, function ($query, $limit) {
                                return $query->limit($limit);
                            })
                            ->get();
                        break;
                    case 'tardiness':
                        $employees = DB::table('assigned_areas as a')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
                                        pi.first_name, ' ',
                                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                        pi.last_name,
                                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                    ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                    THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                    THEN sch.date END) as scheduled_days'),

                                // Days with Tardiness
                                DB::raw("COUNT(DISTINCT CASE
                                        WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                        AND (dtr.first_in > ts.first_in 
                                            OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                        THEN dtr.dtr_date
                                    END) as days_with_tardiness"),

                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            // Apply conditions based on variables
                            ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                    AND la.id IS NULL  -- No approved leave application
                                    THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                    AND la.id IS NULL  -- No approved leave application
                                    AND cto.id IS NULL -- No CTO application
                                    AND oba.id IS NULL -- No Official Business application
                                    AND ota.id IS NULL -- No Official Time application
                                    THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('days_with_tardiness > 0')
                            ->when($sort_order, function ($query, $sort_order) {
                                if ($sort_order === 'asc') {
                                    return $query->orderByRaw('days_with_tardiness ASC');
                                } elseif ($sort_order === 'desc') {
                                    return $query->orderByRaw('days_with_tardiness DESC');
                                } else {
                                    return response()->json(['message' => 'Invalid sort order'], 400);
                                }
                            })
                            ->orderBy('employee_area_name')->orderBy('ep.id')
                            ->when($limit, function ($query, $limit) {
                                return $query->limit($limit);
                            })
                            ->get();
                        break;
                    case 'undertime':
                        $employees = DB::table('assigned_areas as a')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
                                pi.first_name, ' ',
                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                pi.last_name,
                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                            ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN sch.date END) as scheduled_days'),

                                // Total Hours Scheduled
                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                // CTO Applications
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                // Official Business Applications
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                // Leave Applications
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                // Official Time Applications
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            // Apply conditions based on variables
                            ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                AND cto.id IS NOT NULL -- No CTO application
                                AND oba.id IS NOT NULL -- No Official Business application
                                AND ota.id IS NOT NULL -- No Official Time application
                                THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('total_undertime_minutes > 0')
                            ->when($sort_order, function ($query, $sort_order) {
                                if ($sort_order === 'asc') {
                                    return $query->orderByRaw('total_undertime_minutes ASC');
                                } elseif ($sort_order === 'desc') {
                                    return $query->orderByRaw('total_undertime_minutes DESC');
                                } else {
                                    return response()->json(['message' => 'Invalid sort order'], 400);
                                }
                            })
                            ->orderBy('employee_area_name')->orderBy('ep.id')
                            ->when($limit, function ($query, $limit) {
                                return $query->limit($limit);
                            })
                            ->get();
                        break;
                    case 'perfect':
                        $employees = DB::table('assigned_areas as a')
                            ->when($designation_id, function ($query, $designation_id) {
                                return $query->where('a.designation_id', $designation_id);
                            })
                            ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                            ->when($employment_type, function ($query, $employment_type) {
                                return $query->where('ep.employment_type_id', $employment_type);
                            })
                            ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                            ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                            ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                            ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                            ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                            ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                            ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                            ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                            ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                    ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                            })
                            ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                            ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                            ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                            ->leftJoin('cto_applications as cto', function ($join) {
                                $join->on('ep.id', '=', 'cto.employee_profile_id')
                                    ->where('cto.status', '=', 'approved')
                                    ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                            })
                            ->leftJoin('official_business_applications as oba', function ($join) {
                                $join->on('ep.id', '=', 'oba.employee_profile_id')
                                    ->where('oba.status', '=', 'approved')
                                    ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                            })
                            ->leftJoin('leave_applications as la', function ($join) {
                                $join->on('ep.id', '=', 'la.employee_profile_id')
                                    ->where('la.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                            })
                            ->leftJoin('official_time_applications as ota', function ($join) {
                                $join->on('ep.id', '=', 'ota.employee_profile_id')
                                    ->where('ota.status', '=', 'approved')
                                    ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                            })
                            ->select(
                                'ep.id',
                                'ep.employee_id',
                                'ep.biometric_id',
                                'des.name as employee_designation_name',
                                'des.code as employee_designation_code',
                                'et.name as employment_type_name',
                                DB::raw("CONCAT(
            pi.first_name, ' ',
            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
            pi.last_name,
            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
        ) as employee_name"),
                                DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                // Days Present
                                DB::raw('COUNT(DISTINCT CASE 
            WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
            THEN dtr.dtr_date END) as days_present'),

                                // Total Working Minutes
                                DB::raw("SUM(DISTINCT IF(
            dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
            dtr.total_working_minutes, 0)) as total_working_minutes"),

                                // Total Overtime Minutes
                                DB::raw("SUM(DISTINCT IF(
            dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
            dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                // Total Undertime Minutes
                                DB::raw("SUM(DISTINCT IF(
            dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
            dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                // Scheduled Days
                                DB::raw('COUNT(DISTINCT CASE 
            WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
            THEN sch.date END) as scheduled_days'),

                                // Total Hours Scheduled
                                DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                // Count of Leaves with Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                // Count of Leaves without Pay
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                // CTO Applications
                                DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                // Official Business Applications
                                DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                // Leave Applications
                                DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                // Official Time Applications
                                DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                            )
                            // Apply conditions based on variables
                            ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
            AND la.id IS NOT NULL  -- No approved leave application
            THEN sch.date END) as absent_leave_without_pay"));
                            })
                            ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
            AND la.id IS NOT NULL  -- No approved leave application
            AND cto.id IS NOT NULL -- No CTO application
            AND oba.id IS NOT NULL -- No Official Business application
            AND ota.id IS NOT NULL -- No Official Time application
            THEN sch.date END) as absent_without_official_leave"));
                            })
                            ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                            ->havingRaw('total_undertime_minutes > 0')
                            ->when($sort_order, function ($query, $sort_order) {
                                if ($sort_order === 'asc') {
                                    return $query->orderByRaw('total_undertime_minutes ASC');
                                } elseif ($sort_order === 'desc') {
                                    return $query->orderByRaw('total_undertime_minutes DESC');
                                } else {
                                    return response()->json(['message' => 'Invalid sort order'], 400);
                                }
                            })
                            ->orderBy('employee_area_name')->orderBy('ep.id')
                            ->when($limit, function ($query, $limit) {
                                return $query->limit($limit);
                            })
                            ->get();
                        break;
                }
            } else {
                switch ($sector) {
                    case 'division':
                        switch ($report_type) {
                            case 'absences':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                        pi.first_name, ' ',
                                                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                        pi.last_name,
                                                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                    ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                        pi.first_name, ' ',
                                                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                        pi.last_name,
                                                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                    ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'tardiness':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                            pi.first_name, ' ',
                                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                            pi.last_name,
                                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                        ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                            pi.first_name, ' ',
                                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                            pi.last_name,
                                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                        ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'undertime':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    AND cto.id IS NOT NULL -- No CTO application
                                                    AND oba.id IS NOT NULL -- No Official Business application
                                                    AND ota.id IS NOT NULL -- No Official Time application
                                                    THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    AND cto.id IS NOT NULL -- No CTO application
                                                    AND oba.id IS NOT NULL -- No Official Business application
                                                    AND ota.id IS NOT NULL -- No Official Time application
                                                    THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'perfect':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id)
                                                        ->orWhereIn('a.department_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('departments')
                                                                ->where('division_id', $area_id);
                                                        })
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('sections')
                                                                ->where('division_id', $area_id)
                                                                ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('departments')
                                                                        ->where('division_id', $area_id);
                                                                });
                                                        })
                                                        ->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('division_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('division_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                pi.first_name, ' ',
                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                pi.last_name,
                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                AND cto.id IS NOT NULL -- No CTO application
                                AND oba.id IS NOT NULL -- No Official Business application
                                AND ota.id IS NOT NULL -- No Official Time application
                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                pi.first_name, ' ',
                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                pi.last_name,
                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                AND cto.id IS NOT NULL -- No CTO application
                                AND oba.id IS NOT NULL -- No Official Business application
                                AND ota.id IS NOT NULL -- No Official Time application
                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                        }
                        break;
                    case 'department':
                        switch ($report_type) {
                            case 'absences':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                        pi.first_name, ' ',
                                                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                        pi.last_name,
                                                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                    ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.division_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                        pi.first_name, ' ',
                                                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                        pi.last_name,
                                                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                    ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'tardiness':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                            pi.first_name, ' ',
                                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                            pi.last_name,
                                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                        ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                            pi.first_name, ' ',
                                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                            pi.last_name,
                                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                        ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name',  'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'undertime':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    AND cto.id IS NOT NULL -- No CTO application
                                                    AND oba.id IS NOT NULL -- No Official Business application
                                                    AND ota.id IS NOT NULL -- No Official Time application
                                                    THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    AND cto.id IS NOT NULL -- No CTO application
                                                    AND oba.id IS NOT NULL -- No Official Business application
                                                    AND ota.id IS NOT NULL -- No Official Time application
                                                    THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'perfect':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id)
                                                        ->orWhereIn('a.section_id', function ($query) use ($area_id) {
                                                            $query->select('id')->from('sections')->where('department_id', $area_id);
                                                        })->orWhereIn('a.unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('department_id', $area_id)
                                                                        ->orWhereIn('department_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('departments')
                                                                                ->where('department_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                pi.first_name, ' ',
                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                pi.last_name,
                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                AND cto.id IS NOT NULL -- No CTO application
                                AND oba.id IS NOT NULL -- No Official Business application
                                AND ota.id IS NOT NULL -- No Official Time application
                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.department_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                pi.first_name, ' ',
                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                pi.last_name,
                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                AND cto.id IS NOT NULL -- No CTO application
                                AND oba.id IS NOT NULL -- No Official Business application
                                AND ota.id IS NOT NULL -- No Official Time application
                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                        }
                        break;
                    case 'section':
                        switch ($report_type) {
                            case 'absences':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                        pi.first_name, ' ',
                                                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                        pi.last_name,
                                                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                    ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                        pi.first_name, ' ',
                                                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                        pi.last_name,
                                                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                    ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days Absent
                                                    DB::raw("GREATEST(
                                                        COUNT(DISTINCT CASE
                                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                            AND la.id IS NULL
                                                            AND cto.id IS NULL
                                                            AND oba.id IS NULL
                                                            AND ota.id IS NULL
                                                            THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_absent > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_absent ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_absent DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'tardiness':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                            pi.first_name, ' ',
                                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                            pi.last_name,
                                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                        ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                            pi.first_name, ' ',
                                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                            pi.last_name,
                                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                        ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                        THEN sch.date END) as scheduled_days'),

                                                    // Days with Tardiness
                                                    DB::raw("COUNT(DISTINCT CASE
                                                            WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                                            AND (dtr.first_in > ts.first_in 
                                                                OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                            THEN dtr.dtr_date
                                                        END) as days_with_tardiness"),

                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                        AND la.id IS NULL  -- No approved leave application
                                                        AND cto.id IS NULL -- No CTO application
                                                        AND oba.id IS NULL -- No Official Business application
                                                        AND ota.id IS NULL -- No Official Time application
                                                        THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('days_with_tardiness > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('days_with_tardiness ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('days_with_tardiness DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'undertime':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    AND cto.id IS NOT NULL -- No CTO application
                                                    AND oba.id IS NOT NULL -- No Official Business application
                                                    AND ota.id IS NOT NULL -- No Official Time application
                                                    THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                                    dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                    dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                                    WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                    THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NOT NULL  -- No approved leave application
                                                    AND cto.id IS NOT NULL -- No CTO application
                                                    AND oba.id IS NOT NULL -- No Official Business application
                                                    AND ota.id IS NOT NULL -- No Official Time application
                                                    THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                            case 'perfect':
                                switch ($area_under) {
                                    case 'all':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id)
                                                        ->orWhereIn('unit_id', function ($query) use ($area_id) {
                                                            $query->select('id')
                                                                ->from('units')
                                                                ->whereIn('section_id', function ($query) use ($area_id) {
                                                                    $query->select('id')
                                                                        ->from('sections')
                                                                        ->where('section_id', $area_id)
                                                                        ->orWhereIn('section_id', function ($query) use ($area_id) {
                                                                            $query->select('id')
                                                                                ->from('sections')
                                                                                ->where('section_id', $area_id);
                                                                        });
                                                                });
                                                        });
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                pi.first_name, ' ',
                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                pi.last_name,
                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                AND cto.id IS NOT NULL -- No CTO application
                                AND oba.id IS NOT NULL -- No Official Business application
                                AND ota.id IS NOT NULL -- No Official Time application
                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    case 'under':
                                        try {
                                            $employees = DB::table('assigned_areas as a')
                                                ->when($designation_id, function ($query, $designation_id) {
                                                    return $query->where('a.designation_id', $designation_id);
                                                })
                                                ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                                ->when($employment_type, function ($query, $employment_type) {
                                                    return $query->where('ep.employment_type_id', $employment_type);
                                                })
                                                ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                                ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                                ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                                ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                                ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                                ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                                ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                                ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                                ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                                    $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                        ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                                })
                                                ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                                ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                                ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                                ->leftJoin('cto_applications as cto', function ($join) {
                                                    $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                        ->where('cto.status', '=', 'approved')
                                                        ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                                })
                                                ->leftJoin('official_business_applications as oba', function ($join) {
                                                    $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                        ->where('oba.status', '=', 'approved')
                                                        ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                                })
                                                ->leftJoin('leave_applications as la', function ($join) {
                                                    $join->on('ep.id', '=', 'la.employee_profile_id')
                                                        ->where('la.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                                })
                                                ->leftJoin('official_time_applications as ota', function ($join) {
                                                    $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                        ->where('ota.status', '=', 'approved')
                                                        ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                                })
                                                ->where(function ($query) use ($area_id) {
                                                    $query->where('a.section_id', $area_id);
                                                })
                                                ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                                ->whereNull('ep.deactivated_at')
                                                ->where('ep.personal_information_id', '<>', 1)

                                                ->select(
                                                    'ep.id',
                                                    'ep.employee_id',
                                                    'ep.biometric_id',
                                                    'des.name as employee_designation_name',
                                                    'des.code as employee_designation_code',
                                                    'et.name as employment_type_name',
                                                    DB::raw("CONCAT(
                                pi.first_name, ' ',
                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                pi.last_name,
                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                            ) as employee_name"),
                                                    DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                                    DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                                    // Days Present
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN dtr.dtr_date END) as days_present'),

                                                    // Total Working Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                                    // Total Overtime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                                    // Total Undertime Minutes
                                                    DB::raw("SUM(DISTINCT IF(
                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                                    // Scheduled Days
                                                    DB::raw('COUNT(DISTINCT CASE 
                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                THEN sch.date END) as scheduled_days'),

                                                    // Total Hours Scheduled
                                                    DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                                    // Count of Leaves with Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                                    // Count of Leaves without Pay
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                                    // CTO Applications
                                                    DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                                    // Official Business Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                                    // Leave Applications
                                                    DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                                    // Official Time Applications
                                                    DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                                )
                                                // Apply conditions based on variables
                                                ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                THEN sch.date END) as absent_leave_without_pay"));
                                                })
                                                ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                                    return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                AND la.id IS NOT NULL  -- No approved leave application
                                AND cto.id IS NOT NULL -- No CTO application
                                AND oba.id IS NOT NULL -- No Official Business application
                                AND ota.id IS NOT NULL -- No Official Time application
                                THEN sch.date END) as absent_without_official_leave"));
                                                })
                                                ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                                ->havingRaw('total_undertime_minutes > 0')
                                                ->when($sort_order, function ($query, $sort_order) {
                                                    if ($sort_order === 'asc') {
                                                        return $query->orderByRaw('total_undertime_minutes ASC');
                                                    } elseif ($sort_order === 'desc') {
                                                        return $query->orderByRaw('total_undertime_minutes DESC');
                                                    } else {
                                                        return response()->json(['message' => 'Invalid sort order'], 400);
                                                    }
                                                })
                                                ->orderBy('employee_area_name')->orderBy('ep.id')
                                                ->when($limit, function ($query, $limit) {
                                                    return $query->limit($limit);
                                                })
                                                ->get();
                                        } catch (\Throwable $e) {
                                            return response()->json(
                                                [
                                                    'error' => 'An error occurred while retrieving employees data',
                                                    'message' => $e->getMessage()
                                                ],
                                                ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                            );
                                        }
                                        break;
                                    default:
                                        return response()->json(['message' => 'Invalid Under selected area'], 400);
                                }
                                break;
                        }
                        break;
                    case 'unit':
                        switch ($report_type) {
                            case 'absences':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                                                pi.first_name, ' ',
                                                IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                pi.last_name,
                                                IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                            ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                THEN sch.date END) as scheduled_days'),

                                            // Days Absent
                                            DB::raw("GREATEST(
                                                COUNT(DISTINCT CASE
                                                    WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                    AND la.id IS NULL
                                                    AND cto.id IS NULL
                                                    AND oba.id IS NULL
                                                    AND ota.id IS NULL
                                                    THEN sch.date END) - COUNT(DISTINCT dtr.dtr_date), 0) as days_absent"),

                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                        )
                                        // Apply conditions based on variables
                                        ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                AND la.id IS NULL  -- No approved leave application
                                                THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                AND la.id IS NULL  -- No approved leave application
                                                AND cto.id IS NULL -- No CTO application
                                                AND oba.id IS NULL -- No Official Business application
                                                AND ota.id IS NULL -- No Official Time application
                                                THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('days_absent > 0')
                                        ->when($sort_order, function ($query, $sort_order) {
                                            if ($sort_order === 'asc') {
                                                return $query->orderByRaw('days_absent ASC');
                                            } elseif ($sort_order === 'desc') {
                                                return $query->orderByRaw('days_absent DESC');
                                            } else {
                                                return response()->json(['message' => 'Invalid sort order'], 400);
                                            }
                                        })
                                        ->orderBy('employee_area_name')->orderBy('ep.id')
                                        ->when($limit, function ($query, $limit) {
                                            return $query->limit($limit);
                                        })
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            case 'tardiness':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                                                    pi.first_name, ' ',
                                                    IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                                    pi.last_name,
                                                    IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                                    IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                                ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                                dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                                dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                                                WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                                THEN sch.date END) as scheduled_days'),

                                            // Days with Tardiness
                                            DB::raw("COUNT(DISTINCT CASE
                                                    WHEN (dtr.dtr_date BETWEEN '$start_date' AND '$end_date')
                                                    AND (dtr.first_in > ts.first_in 
                                                        OR (dtr.second_in IS NOT NULL AND dtr.second_in > ts.second_in))
                                                    THEN dtr.dtr_date
                                                END) as days_with_tardiness"),

                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                        )
                                        // Apply conditions based on variables
                                        ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                AND la.id IS NULL  -- No approved leave application
                                                THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                                WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                                AND la.id IS NULL  -- No approved leave application
                                                AND cto.id IS NULL -- No CTO application
                                                AND oba.id IS NULL -- No Official Business application
                                                AND ota.id IS NULL -- No Official Time application
                                                THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'ep.biometric_id', 'employment_type_name', 'employee_name', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('days_with_tardiness > 0')
                                        ->when($sort_order, function ($query, $sort_order) {
                                            if ($sort_order === 'asc') {
                                                return $query->orderByRaw('days_with_tardiness ASC');
                                            } elseif ($sort_order === 'desc') {
                                                return $query->orderByRaw('days_with_tardiness DESC');
                                            } else {
                                                return response()->json(['message' => 'Invalid sort order'], 400);
                                            }
                                        })
                                        ->orderBy('employee_area_name')->orderBy('ep.id')
                                        ->when($limit, function ($query, $limit) {
                                            return $query->limit($limit);
                                        })
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            case 'undertime':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                                            pi.first_name, ' ',
                                            IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                                            pi.last_name,
                                            IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                                            IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                                        ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                                            WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                            THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                            dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                            dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                            dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                            dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                                            dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                                            dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                                            WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                                            THEN sch.date END) as scheduled_days'),

                                            // Total Hours Scheduled
                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                            // CTO Applications
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                            // Official Business Applications
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                            // Leave Applications
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                            // Official Time Applications
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                        )
                                        // Apply conditions based on variables
                                        ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                            AND la.id IS NOT NULL  -- No approved leave application
                                            THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                                            WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                                            AND la.id IS NOT NULL  -- No approved leave application
                                            AND cto.id IS NOT NULL -- No CTO application
                                            AND oba.id IS NOT NULL -- No Official Business application
                                            AND ota.id IS NOT NULL -- No Official Time application
                                            THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('total_undertime_minutes > 0')
                                        ->when($sort_order, function ($query, $sort_order) {
                                            if ($sort_order === 'asc') {
                                                return $query->orderByRaw('total_undertime_minutes ASC');
                                            } elseif ($sort_order === 'desc') {
                                                return $query->orderByRaw('total_undertime_minutes DESC');
                                            } else {
                                                return response()->json(['message' => 'Invalid sort order'], 400);
                                            }
                                        })
                                        ->orderBy('employee_area_name')->orderBy('ep.id')
                                        ->when($limit, function ($query, $limit) {
                                            return $query->limit($limit);
                                        })
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            case 'perfect':
                                try {
                                    $employees = DB::table('assigned_areas as a')
                                        ->leftJoin('employee_profiles as ep', 'a.employee_profile_id', '=', 'ep.id')
                                        ->when($designation_id, function ($query, $designation_id) {
                                            return $query->where('a.designation_id', $designation_id);
                                        })
                                        ->when($employment_type, function ($query, $employment_type) {
                                            return $query->where('ep.employment_type_id', $employment_type);
                                        })
                                        ->leftJoin('personal_informations as pi', 'ep.personal_information_id', '=', 'pi.id')
                                        ->leftJoin('designations as des', 'a.designation_id', '=', 'des.id')
                                        ->leftJoin('employment_types as et', 'ep.employment_type_id', '=', 'et.id')
                                        ->leftJoin('divisions as d', 'a.division_id', '=', 'd.id')
                                        ->leftJoin('departments as dept', 'a.department_id', '=', 'dept.id')
                                        ->leftJoin('sections as s', 'a.section_id', '=', 's.id')
                                        ->leftJoin('units as u', 'a.unit_id', '=', 'u.id')
                                        ->leftJoin('biometrics as b', 'ep.biometric_id', '=', 'b.biometric_id')
                                        ->leftJoin('daily_time_records as dtr', function ($join) use ($start_date, $end_date) {
                                            $join->on('b.biometric_id', '=', 'dtr.biometric_id')
                                                ->whereBetween('dtr.dtr_date', [$start_date, $end_date]);
                                        })
                                        ->leftJoin('employee_profile_schedule as eps', 'ep.id', '=', 'eps.employee_profile_id')
                                        ->leftJoin('schedules as sch', 'eps.schedule_id', '=', 'sch.id')
                                        ->leftJoin('time_shifts as ts', 'sch.time_shift_id', '=', 'ts.id')
                                        ->leftJoin('cto_applications as cto', function ($join) {
                                            $join->on('ep.id', '=', 'cto.employee_profile_id')
                                                ->where('cto.status', '=', 'approved')
                                                ->whereRaw('DATE(cto.date) = DATE(sch.date)');
                                        })
                                        ->leftJoin('official_business_applications as oba', function ($join) {
                                            $join->on('ep.id', '=', 'oba.employee_profile_id')
                                                ->where('oba.status', '=', 'approved')
                                                ->whereBetween('sch.date', [DB::raw('oba.date_from'), DB::raw('oba.date_to')]);
                                        })
                                        ->leftJoin('leave_applications as la', function ($join) {
                                            $join->on('ep.id', '=', 'la.employee_profile_id')
                                                ->where('la.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('DATE(la.date_from)'), DB::raw('DATE(la.date_to)')]);
                                        })
                                        ->leftJoin('official_time_applications as ota', function ($join) {
                                            $join->on('ep.id', '=', 'ota.employee_profile_id')
                                                ->where('ota.status', '=', 'approved')
                                                ->whereBetween(DB::raw('sch.date'), [DB::raw('ota.date_from'), DB::raw('ota.date_to')]);
                                        })
                                        ->where(function ($query) use ($area_id) {
                                            $query->where('a.unit_id', $area_id);
                                        })
                                        ->whereNotNull('ep.biometric_id') // Ensure the employee has biometric data
                                        ->whereNull('ep.deactivated_at')
                                        ->select(
                                            'ep.id',
                                            'ep.employee_id',
                                            'ep.biometric_id',
                                            DB::raw("CONCAT(
                        pi.first_name, ' ',
                        IF(pi.middle_name IS NOT NULL AND pi.middle_name != '', CONCAT(SUBSTRING(pi.middle_name, 1, 1), '. '), ''),
                        pi.last_name,
                        IF(pi.name_extension IS NOT NULL AND pi.name_extension != '', CONCAT(' ', pi.name_extension), ' '),
                        IF(pi.name_title IS NOT NULL AND pi.name_title != '', CONCAT(', ', pi.name_title), ' ')
                    ) as employee_name"),
                                            DB::raw('COALESCE(u.name, s.name, dept.name, d.name) as employee_area_name'),
                                            DB::raw('COALESCE(u.code, s.code, dept.code, d.code) as employee_area_code'),

                                            // Days Present
                                            DB::raw('COUNT(DISTINCT CASE 
                        WHEN dtr.dtr_date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                        THEN dtr.dtr_date END) as days_present'),

                                            // Total Working Minutes
                                            DB::raw("SUM(DISTINCT IF(
                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                        dtr.total_working_minutes, 0)) as total_working_minutes"),

                                            // Total Overtime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                        dtr.overtime_minutes, 0)) as total_overtime_minutes"),

                                            // Total Undertime Minutes
                                            DB::raw("SUM(DISTINCT IF(
                        dtr.dtr_date BETWEEN '$start_date' AND '$end_date',
                        dtr.undertime_minutes, 0)) as total_undertime_minutes"),

                                            // Scheduled Days
                                            DB::raw('COUNT(DISTINCT CASE 
                        WHEN sch.date BETWEEN "' . $start_date . '" AND "' . $end_date . '" 
                        THEN sch.date END) as scheduled_days'),

                                            // Total Hours Scheduled
                                            DB::raw('SUM(ts.total_hours) as scheduled_total_hours'),
                                            // Count of Leaves with Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 0) as total_leave_with_pay"),
                                            // Count of Leaves without Pay
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved' AND la.without_pay = 1) as total_leave_without_pay"),

                                            // CTO Applications
                                            DB::raw("(SELECT COUNT(*) FROM cto_applications cto WHERE cto.employee_profile_id = ep.id AND cto.status = 'approved') as total_cto_applications"),

                                            // Official Business Applications
                                            DB::raw("(SELECT COUNT(*) FROM official_business_applications oba WHERE oba.employee_profile_id = ep.id AND oba.status = 'approved') as total_official_business_applications"),

                                            // Leave Applications
                                            DB::raw("(SELECT COUNT(*) FROM leave_applications la WHERE la.employee_profile_id = ep.id AND la.status = 'approved') as total_leave_applications"),

                                            // Official Time Applications
                                            DB::raw("(SELECT COUNT(*) FROM official_time_applications ota WHERE ota.employee_profile_id = ep.id AND ota.status = 'approved') as total_official_time_applications")
                                        )
                                        // Apply conditions based on variables
                                        ->when($absent_leave_without_pay, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                        AND la.id IS NOT NULL  -- No approved leave application
                        THEN sch.date END) as absent_leave_without_pay"));
                                        })
                                        ->when($absent_without_official_leave, function ($query) use ($start_date, $end_date) {
                                            return $query->addSelect(DB::raw("COUNT(DISTINCT CASE
                        WHEN sch.date BETWEEN '$start_date' AND '$end_date'
                        AND la.id IS NOT NULL  -- No approved leave application
                        AND cto.id IS NOT NULL -- No CTO application
                        AND oba.id IS NOT NULL -- No Official Business application
                        AND ota.id IS NOT NULL -- No Official Time application
                        THEN sch.date END) as absent_without_official_leave"));
                                        })
                                        ->groupBy('ep.id', 'ep.employee_id', 'employment_type_name', 'employee_name', 'ep.biometric_id', 'employee_designation_name', 'employee_designation_code', 'employee_area_name', 'employee_area_code')
                                        ->havingRaw('total_undertime_minutes > 0')
                                        ->when($sort_order, function ($query, $sort_order) {
                                            if ($sort_order === 'asc') {
                                                return $query->orderByRaw('total_undertime_minutes ASC');
                                            } elseif ($sort_order === 'desc') {
                                                return $query->orderByRaw('total_undertime_minutes DESC');
                                            } else {
                                                return response()->json(['message' => 'Invalid sort order'], 400);
                                            }
                                        })
                                        ->orderBy('employee_area_name')->orderBy('ep.id')
                                        ->when($limit, function ($query, $limit) {
                                            return $query->limit($limit);
                                        })
                                        ->get();
                                } catch (\Throwable $e) {
                                    return response()->json(
                                        [
                                            'error' => 'An error occurred while retrieving employees data',
                                            'message' => $e->getMessage()
                                        ],
                                        ResponseAlias::HTTP_INTERNAL_SERVER_ERROR
                                    );
                                }
                                break;
                            default:
                                return response()->json(['message' => 'Invalid report type.'], 400);
                        }
                        break;
                    default:
                        return response()->json(['message' => 'Unknown sector.'], 400);
                }
            }

            return response()->json([
                'count' => COUNT($employees),
                'message' => 'Successfully retrieved data.',
                'data' => $employees

            ]);
        } catch (\Throwable $th) {
            // Log the error and return an internal server error response
            Helpers::errorLog($this->CONTROLLER_NAME, 'filterAttendanceReport', $th->getMessage());
            return response()->json(
                [
                    'message' => $th->getMessage()
                ],
                Response::HTTP_INTERNAL_SERVER_ERROR
            );
        }
    }
}
